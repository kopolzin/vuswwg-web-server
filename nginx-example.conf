#
# Place this config file in /etc/nginx/conf.d/
# Be sure to replace the upstream block below with the equivalent section
# from your /etc/nginx/nginx-jelastic.conf file
#

http {
	server_tokens off;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    set_real_ip_from  192.168.0.0/16;
    set_real_ip_from  10.0.0.0/8;
    set_real_ip_from  172.16.0.0/16;
    real_ip_header    X-Forwarded-For;
    real_ip_recursive on;

    log_format main
      '"$http_x_forwarded_for" - $remote_user [$time_local] '
      '"$request" $status $bytes_sent '
      '"$http_referer" "$http_user_agent" '
      '"$gzip_ratio"';
      
    client_header_timeout 10m;
    client_body_timeout 10m;
    send_timeout 10m;
    client_max_body_size 500m;

    connection_pool_size 256;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 32k;
    request_pool_size 4k;
    #gzip on;
    gzip_min_length 1100;
    gzip_buffers 4 8k;
    gzip_types text/plain;
    
    output_buffers 1 32k;
    postpone_output 1460;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 75 20;

    ignore_invalid_headers on;
    
    #
    # Begin content specific to your Jelastic instance
    # This should be copied from /etc/nginx/nginx-jelastic.conf
    #
    
    map $upstream_addr        $group {
        default               "";
    ### MAPPING FOLLOWS HERE ###
    ### ~XXX\.XXX\.XXX\.XXX\:XX$   $GROUPNAME; ### MAPPROTO ### This is mappings prototype line, do not remove this! 
~192\.168\.22\.233\:80$ common; ### MAPPROTO for common ###
    }

    ### DEFAULT UPSTREAM FOLLOWS HERE ###
    upstream default_upstream{
    ### server XXX.XXX.XXX.XXX; ### $GROUPNAME ### DEFUPPROTO ###
		server 192.168.22.233;   ### DEFUPPROTO for common ###
    	sticky path=/;
  	}
    
    ### UPSTREAMS LIST FOLLOWS HERE ###
        #upstream nodes{ server XXX.XXX.XXX.XXX; server 127.0.0.1:8001 backup # UPSTREAMPROTO # This is upstream prototype line, do not remove this! }
	upstream common { 
    	server 192.168.22.233;  
    	sticky path=/; 
  	} ### UPSTREAMPROTO for common ###

    #
    # End content specific to your Jelastic instance
    #

  	#
  	# HTTP server configuration
  	#

  	server {
        listen       80;
        server_name  sparql.vanderbilt.edu;

        return 301 https://$server_name$request_uri;
  	}

    #
    # HTTPS server configuration
    #

    server {
        listen       443 ssl http2 default_server;
        server_name  sparql.vanderbilt.edu;

        ssl                  on;
        ssl_certificate      /var/lib/jelastic/SSL/jelastic.chain;
        ssl_certificate_key  /var/lib/jelastic/SSL/jelastic.key;

        ssl_session_timeout  1d;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers   on;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        
        # Mozilla-recommended intermediate ciphers
        # https://mozilla.github.io/server-side-tls/ssl-config-generator/
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

        access_log /var/log/nginx/localhost.access_log main;
        error_log /var/log/nginx/localhost.error_log info;
        proxy_temp_path /var/nginx/tmp/;
        error_page   500 502 503 504  /50x.html;
  
        proxy_next_upstream error;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Host $http_host;
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;
        proxy_set_header X-URI $uri;
        proxy_set_header X-ARGS $args;
        proxy_set_header Refer $http_refer;
        proxy_set_header X-Forwarded-Proto $scheme;

        location = /50x.html {
          root   html;
        }
        location = / {
          return 301 https://$host/bg/;
        }
        location / {
          limit_except GET {
            auth_basic           "Authentication required";
            auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
          }
          if ($cookie_SRVGROUP ~ group|common) {
            proxy_pass http://$cookie_SRVGROUP;
            error_page   500 502 503 504 = @rescue;
          }
          if ($cookie_SRVGROUP !~ group|common) {
            add_header Set-Cookie "SRVGROUP=$group; path=/";
          }
          proxy_pass http://default_upstream;
          add_header Set-Cookie "SRVGROUP=$group; path=/";
      	}
        location /bg/ {
          limit_except GET POST {
            auth_basic           "Authentication required";
            auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
          }
          if ($cookie_SRVGROUP ~ group|common) {
            proxy_pass http://$cookie_SRVGROUP;
            error_page   500 502 503 504 = @rescue;
          }
          if ($cookie_SRVGROUP !~ group|common) {
            add_header Set-Cookie "SRVGROUP=$group; path=/";
          }
          proxy_pass http://default_upstream;
          add_header Set-Cookie "SRVGROUP=$group; path=/";
        } 
        location /bg/backup {
          auth_basic           "Authentication required";
          auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

          if ($cookie_SRVGROUP ~ group|common) {
            proxy_pass http://$cookie_SRVGROUP;
            error_page   500 502 503 504 = @rescue;
          }
          if ($cookie_SRVGROUP !~ group|common) {
            add_header Set-Cookie "SRVGROUP=$group; path=/";
          }
          proxy_pass http://default_upstream;
          add_header Set-Cookie "SRVGROUP=$group; path=/";
        }
        location ^~ /bg/sparql {
          limit_except GET {
            auth_basic           "Authentication required";
            auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
          }
          if ($cookie_SRVGROUP ~ group|common) {
            proxy_pass http://$cookie_SRVGROUP;
            error_page   500 502 503 504 = @rescue;
          }
          if ($cookie_SRVGROUP !~ group|common) {
            add_header Set-Cookie "SRVGROUP=$group; path=/";
          }
          proxy_pass http://default_upstream;
          add_header Set-Cookie "SRVGROUP=$group; path=/";
        }
        location @rescue {
          proxy_pass http://default_upstream;
          add_header Set-Cookie "SRVGROUP=$group; path=/";
        }
    }
}
